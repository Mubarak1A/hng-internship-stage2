import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { User } from './user.entity';
import { UsersService } from './users.service';
import * as bcrypt from 'bcryptjs';

const mockUserRepository = {
  save: jest.fn(),
  findOne: jest.fn(),
  find: jest.fn(),
};

// Generated by CodiumAI

describe('UsersService', () => {

    // create a user with valid data
    it('should create a user with valid data', async () => {
      const mockUserRepository = {
        save: jest.fn().mockResolvedValue({
          userId: '1',
          firstName: 'John',
          lastName: 'Doe',
          email: 'john.doe@example.com',
          password: 'hashedpassword',
        }),
      };
      const usersService = new UsersService(mockUserRepository as any);
      const user = {
        firstName: 'John',
        lastName: 'Doe',
        email: 'john.doe@example.com',
        password: 'password123',
      } as User;
      const result = await usersService.create(user);
      expect(result).toEqual({
        userId: '1',
        firstName: 'John',
        lastName: 'Doe',
        email: 'john.doe@example.com',
        password: 'hashedpassword',
      });
      expect(mockUserRepository.save).toHaveBeenCalledWith(expect.objectContaining({
        firstName: 'John',
        lastName: 'Doe',
        email: 'john.doe@example.com',
      }));
    });

    // create a user with missing required fields
    it('should throw an error when creating a user with missing required fields', async () => {
      const mockUserRepository = {
        save: jest.fn(),
      };
      const usersService = new UsersService(mockUserRepository as any);
      const user = {
        firstName: '',
        lastName: '',
        email: '',
        password: '',
      } as User;
      await expect(usersService.create(user)).rejects.toThrow();
    });
});
